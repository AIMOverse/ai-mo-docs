"{\"value\":{\"mdx\":\"# API Integration\\n\\nLearn how to integrate your AI service with AiMo Network's proxy system.\\n\\n## Integration Overview\\n\\nThe AiMo proxy acts as a bridge between the AiMo Network and your AI service, handling authentication, routing, and payment settlement while forwarding requests to your HTTP endpoint.\\n\\n### How It Works\\n\\n1. **User requests** are routed through AiMo Network\\n2. **Proxy receives** the request via WebSocket\\n3. **HTTP forwarding** to your service endpoint\\n4. **Response streaming** back through the proxy\\n5. **Payment settlement** based on usage data\\n\\n## Request/Response Format\\n\\n### Standard Request Format\\n\\nYour service must accept OpenAI-compatible requests:\\n\\n```json\\n{\\n  \\\"model\\\": \\\"your-model-name\\\",\\n  \\\"messages\\\": [\\n    {\\\"role\\\": \\\"system\\\", \\\"content\\\": \\\"You are a helpful assistant.\\\"},\\n    {\\\"role\\\": \\\"user\\\", \\\"content\\\": \\\"Hello, how are you?\\\"}\\n  ],\\n  \\\"max_tokens\\\": 150,\\n  \\\"temperature\\\": 0.7,\\n  \\\"stream\\\": false\\n}\\n```\\n\\n### Required Response Format\\n\\n#### Non-Streaming Response\\n\\n```json\\n{\\n  \\\"id\\\": \\\"chatcmpl-123\\\",\\n  \\\"object\\\": \\\"chat.completion\\\",\\n  \\\"created\\\": 1677652288,\\n  \\\"choices\\\": [\\n    {\\n      \\\"index\\\": 0,\\n      \\\"message\\\": {\\n        \\\"role\\\": \\\"assistant\\\",\\n        \\\"content\\\": \\\"Hello! I'm doing well, thank you for asking. How can I help you today?\\\"\\n      },\\n      \\\"finish_reason\\\": \\\"stop\\\"\\n    }\\n  ],\\n  \\\"usage\\\": {\\n    \\\"prompt_tokens\\\": 13,\\n    \\\"completion_tokens\\\": 17,\\n    \\\"total_tokens\\\": 30\\n  }\\n}\\n```\\n\\n#### Streaming Response\\n\\nFor streaming responses, use Server-Sent Events format:\\n\\n```http\\nContent-Type: text/event-stream\\n\\ndata: {\\\"id\\\":\\\"chatcmpl-123\\\",\\\"object\\\":\\\"chat.completion.chunk\\\",\\\"created\\\":1677652288,\\\"choices\\\":[{\\\"index\\\":0,\\\"delta\\\":{\\\"content\\\":\\\"Hello\\\"},\\\"finish_reason\\\":null}]}\\n\\ndata: {\\\"id\\\":\\\"chatcmpl-123\\\",\\\"object\\\":\\\"chat.completion.chunk\\\",\\\"created\\\":1677652288,\\\"choices\\\":[{\\\"index\\\":0,\\\"delta\\\":{\\\"content\\\":\\\"!\\\"},\\\"finish_reason\\\":null}]}\\n\\ndata: {\\\"id\\\":\\\"chatcmpl-123\\\",\\\"object\\\":\\\"chat.completion.chunk\\\",\\\"created\\\":1677652288,\\\"choices\\\":[{\\\"index\\\":0,\\\"delta\\\":{},\\\"finish_reason\\\":\\\"stop\\\"}],\\\"usage\\\":{\\\"prompt_tokens\\\":13,\\\"completion_tokens\\\":17,\\\"total_tokens\\\":30}}\\n\\ndata: [DONE]\\n```\\n\\n## Implementation Examples\\n\\n### OpenAI-Compatible Service\\n\\nIf your service is already OpenAI-compatible:\\n\\n```python\\nfrom flask import Flask, request, jsonify, Response\\nimport openai\\nimport json\\n\\napp = Flask(__name__)\\n\\n@app.route('/v1/chat/completions', methods=['POST'])\\ndef chat_completions():\\n    data = request.json\\n    \\n    # Forward to your underlying model\\n    response = openai.ChatCompletion.create(\\n        model=data.get('model'),\\n        messages=data.get('messages'),\\n        stream=data.get('stream', False),\\n        max_tokens=data.get('max_tokens'),\\n        temperature=data.get('temperature', 0.7)\\n    )\\n    \\n    if data.get('stream'):\\n        def generate():\\n            for chunk in response:\\n                yield f\\\"data: {json.dumps(chunk)}\\\\n\\\\n\\\"\\n            yield \\\"data: [DONE]\\\\n\\\\n\\\"\\n        \\n        return Response(generate(), mimetype='text/event-stream')\\n    \\n    return jsonify(response)\\n\\nif __name__ == '__main__':\\n    app.run(host='0.0.0.0', port=8080)\\n```\\n\\n### Custom Service Implementation\\n\\nFor custom models, ensure proper usage tracking:\\n\\n```python\\nfrom flask import Flask, request, jsonify, Response\\nimport json\\nimport time\\nimport uuid\\n\\napp = Flask(__name__)\\n\\ndef count_tokens(text):\\n    \\\"\\\"\\\"Simple token counting - replace with your tokenizer\\\"\\\"\\\"\\n    return len(text.split())\\n\\ndef generate_response(messages, model_name, **params):\\n    \\\"\\\"\\\"Your model inference logic here\\\"\\\"\\\"\\n    # This is where you'd call your actual model\\n    response_text = \\\"This is a sample response from your model.\\\"\\n    \\n    # Calculate tokens\\n    prompt_tokens = sum(count_tokens(msg['content']) for msg in messages)\\n    completion_tokens = count_tokens(response_text)\\n    \\n    return {\\n        'text': response_text,\\n        'prompt_tokens': prompt_tokens,\\n        'completion_tokens': completion_tokens\\n    }\\n\\n@app.route('/v1/chat/completions', methods=['POST'])\\ndef chat_completions():\\n    data = request.json\\n    request_id = f\\\"chatcmpl-{uuid.uuid4().hex[:8]}\\\"\\n    \\n    try:\\n        # Validate request\\n        if not data.get('messages'):\\n            return jsonify({'error': 'Missing messages'}), 400\\n        \\n        # Generate response using your model\\n        result = generate_response(\\n            messages=data['messages'],\\n            model_name=data.get('model', 'default'),\\n            max_tokens=data.get('max_tokens', 150),\\n            temperature=data.get('temperature', 0.7)\\n        )\\n        \\n        # Prepare usage object - CRITICAL for payment!\\n        usage = {\\n            \\\"prompt_tokens\\\": result['prompt_tokens'],\\n            \\\"completion_tokens\\\": result['completion_tokens'],\\n            \\\"total_tokens\\\": result['prompt_tokens'] + result['completion_tokens']\\n        }\\n        \\n        if data.get('stream'):\\n            # Streaming response\\n            def generate():\\n                words = result['text'].split()\\n                \\n                # Stream word by word\\n                for i, word in enumerate(words):\\n                    chunk = {\\n                        \\\"id\\\": request_id,\\n                        \\\"object\\\": \\\"chat.completion.chunk\\\",\\n                        \\\"created\\\": int(time.time()),\\n                        \\\"choices\\\": [{\\n                            \\\"index\\\": 0,\\n                            \\\"delta\\\": {\\\"content\\\": word + \\\" \\\" if i < len(words)-1 else word},\\n                            \\\"finish_reason\\\": None\\n                        }]\\n                    }\\n                    yield f\\\"data: {json.dumps(chunk)}\\\\n\\\\n\\\"\\n                    time.sleep(0.1)  # Simulate streaming delay\\n                \\n                # Final chunk with usage - REQUIRED for payment!\\n                final_chunk = {\\n                    \\\"id\\\": request_id,\\n                    \\\"object\\\": \\\"chat.completion.chunk\\\",\\n                    \\\"created\\\": int(time.time()),\\n                    \\\"choices\\\": [{\\n                        \\\"index\\\": 0,\\n                        \\\"delta\\\": {},\\n                        \\\"finish_reason\\\": \\\"stop\\\"\\n                    }],\\n                    \\\"usage\\\": usage\\n                }\\n                yield f\\\"data: {json.dumps(final_chunk)}\\\\n\\\\n\\\"\\n                yield \\\"data: [DONE]\\\\n\\\\n\\\"\\n            \\n            return Response(generate(), mimetype='text/event-stream')\\n        \\n        else:\\n            # Non-streaming response\\n            return jsonify({\\n                \\\"id\\\": request_id,\\n                \\\"object\\\": \\\"chat.completion\\\",\\n                \\\"created\\\": int(time.time()),\\n                \\\"choices\\\": [{\\n                    \\\"index\\\": 0,\\n                    \\\"message\\\": {\\n                        \\\"role\\\": \\\"assistant\\\",\\n                        \\\"content\\\": result['text']\\n                    },\\n                    \\\"finish_reason\\\": \\\"stop\\\"\\n                }],\\n                \\\"usage\\\": usage\\n            })\\n    \\n    except Exception as e:\\n        return jsonify({'error': str(e)}), 500\\n\\n@app.route('/health', methods=['GET'])\\ndef health_check():\\n    return jsonify({'status': 'healthy', 'timestamp': time.time()})\\n\\nif __name__ == '__main__':\\n    app.run(host='0.0.0.0', port=8080)\\n```\\n\\n### Node.js Implementation\\n\\n```javascript\\nconst express = require('express');\\nconst app = express();\\n\\napp.use(express.json());\\n\\nfunction countTokens(text) {\\n    // Simple token counting - replace with your tokenizer\\n    return text.split(' ').length;\\n}\\n\\nasync function generateResponse(messages, model, params) {\\n    // Your model processing logic here\\n    const responseText = \\\"This is a sample response from your Node.js model.\\\";\\n    \\n    const promptTokens = messages.reduce((sum, msg) => sum + countTokens(msg.content), 0);\\n    const completionTokens = countTokens(responseText);\\n    \\n    return {\\n        text: responseText,\\n        promptTokens,\\n        completionTokens\\n    };\\n}\\n\\napp.post('/v1/chat/completions', async (req, res) => {\\n    const { model, messages, stream, max_tokens, temperature } = req.body;\\n    const requestId = `chatcmpl-${Math.random().toString(36).substr(2, 9)}`;\\n    \\n    try {\\n        if (!messages || messages.length === 0) {\\n            return res.status(400).json({ error: 'Missing messages' });\\n        }\\n        \\n        // Generate response\\n        const result = await generateResponse(messages, model, { max_tokens, temperature });\\n        \\n        // Calculate token usage - CRITICAL for payment!\\n        const usage = {\\n            prompt_tokens: result.promptTokens,\\n            completion_tokens: result.completionTokens,\\n            total_tokens: result.promptTokens + result.completionTokens\\n        };\\n        \\n        if (stream) {\\n            res.setHeader('Content-Type', 'text/event-stream');\\n            res.setHeader('Cache-Control', 'no-cache');\\n            res.setHeader('Connection', 'keep-alive');\\n            \\n            const words = result.text.split(' ');\\n            \\n            // Stream response chunks\\n            for (let i = 0; i < words.length; i++) {\\n                const chunk = {\\n                    id: requestId,\\n                    object: 'chat.completion.chunk',\\n                    created: Math.floor(Date.now() / 1000),\\n                    choices: [{\\n                        index: 0,\\n                        delta: { content: words[i] + (i < words.length - 1 ? ' ' : '') },\\n                        finish_reason: null\\n                    }]\\n                };\\n                \\n                res.write(`data: ${JSON.stringify(chunk)}\\\\n\\\\n`);\\n                await new Promise(resolve => setTimeout(resolve, 100)); // Streaming delay\\n            }\\n            \\n            // Send final chunk with usage - REQUIRED for payment!\\n            const finalChunk = {\\n                id: requestId,\\n                object: 'chat.completion.chunk',\\n                created: Math.floor(Date.now() / 1000),\\n                choices: [{\\n                    index: 0,\\n                    delta: {},\\n                    finish_reason: 'stop'\\n                }],\\n                usage\\n            };\\n            \\n            res.write(`data: ${JSON.stringify(finalChunk)}\\\\n\\\\n`);\\n            res.write('data: [DONE]\\\\n\\\\n');\\n            res.end();\\n        } else {\\n            // Non-streaming response\\n            res.json({\\n                id: requestId,\\n                object: 'chat.completion',\\n                created: Math.floor(Date.now() / 1000),\\n                choices: [{\\n                    index: 0,\\n                    message: {\\n                        role: 'assistant',\\n                        content: result.text\\n                    },\\n                    finish_reason: 'stop'\\n                }],\\n                usage\\n            });\\n        }\\n    } catch (error) {\\n        res.status(500).json({ error: error.message });\\n    }\\n});\\n\\napp.get('/health', (req, res) => {\\n    res.json({ status: 'healthy', timestamp: Date.now() });\\n});\\n\\nconst PORT = process.env.PORT || 8080;\\napp.listen(PORT, '0.0.0.0', () => {\\n    console.log(`Model server running on port ${PORT}`);\\n});\\n```\\n\\n## Advanced Features\\n\\n### Custom Parameters\\n\\nYou can support model-specific parameters:\\n\\n```json\\n{\\n  \\\"model\\\": \\\"your-model\\\",\\n  \\\"messages\\\": [...],\\n  \\\"custom_params\\\": {\\n    \\\"creativity_level\\\": 1.2,\\n    \\\"style\\\": \\\"technical\\\",\\n    \\\"domain\\\": \\\"healthcare\\\"\\n  }\\n}\\n```\\n\\nHandle these in your service:\\n\\n```python\\n@app.route('/v1/chat/completions', methods=['POST'])\\ndef chat_completions():\\n    data = request.json\\n    \\n    # Extract custom parameters\\n    custom_params = data.get('custom_params', {})\\n    creativity = custom_params.get('creativity_level', 1.0)\\n    style = custom_params.get('style', 'general')\\n    \\n    # Use parameters in your model\\n    result = your_model.generate(\\n        messages=data['messages'],\\n        creativity=creativity,\\n        style=style\\n    )\\n    \\n    # Return standard format with usage\\n    return jsonify({...})\\n```\\n\\n### Content Filtering\\n\\nImplement safety measures:\\n\\n```python\\ndef content_filter(text):\\n    \\\"\\\"\\\"Filter inappropriate content\\\"\\\"\\\"\\n    # Your content filtering logic\\n    blocked_patterns = ['harmful_word1', 'harmful_word2']\\n    \\n    for pattern in blocked_patterns:\\n        if pattern.lower() in text.lower():\\n            raise ValueError(\\\"Content violates safety guidelines\\\")\\n    \\n    return text\\n\\n@app.route('/v1/chat/completions', methods=['POST'])\\ndef chat_completions():\\n    data = request.json\\n    \\n    # Filter input\\n    for message in data['messages']:\\n        message['content'] = content_filter(message['content'])\\n    \\n    # Generate response\\n    response = generate_response(data)\\n    \\n    # Filter output\\n    response['choices'][0]['message']['content'] = content_filter(\\n        response['choices'][0]['message']['content']\\n    )\\n    \\n    return jsonify(response)\\n```\\n\\n### Error Handling\\n\\nImplement comprehensive error handling:\\n\\n```python\\nfrom functools import wraps\\n\\ndef handle_errors(func):\\n    @wraps(func)\\n    def wrapper(*args, **kwargs):\\n        try:\\n            return func(*args, **kwargs)\\n        except ValueError as e:\\n            return jsonify({'error': f'Validation error: {str(e)}'}), 400\\n        except RuntimeError as e:\\n            return jsonify({'error': f'Model error: {str(e)}'}), 500\\n        except Exception as e:\\n            return jsonify({'error': 'Internal server error'}), 500\\n    return wrapper\\n\\n@app.route('/v1/chat/completions', methods=['POST'])\\n@handle_errors\\ndef chat_completions():\\n    # Your implementation\\n    pass\\n```\\n\\n## Payment Requirements\\n\\n### Critical Usage Object\\n\\n**Every response must include accurate token usage data:**\\n\\n```json\\n{\\n  \\\"usage\\\": {\\n    \\\"prompt_tokens\\\": 25,\\n    \\\"completion_tokens\\\": 15,\\n    \\\"total_tokens\\\": 40\\n  }\\n}\\n```\\n\\n### Token Counting Best Practices\\n\\n1. **Use your model's tokenizer** for accurate counting\\n2. **Include all prompt tokens** (system + user messages)\\n3. **Count actual generated tokens** in completion\\n4. **Verify total = prompt + completion**\\n\\n### Streaming Usage Requirements\\n\\nFor streaming responses:\\n- **Include usage in final chunk** before `[DONE]`\\n- **Count all streamed tokens** accurately\\n- **Don't include usage in intermediate chunks**\\n\\n## Testing Your Integration\\n\\n### Unit Tests\\n\\n```python\\nimport unittest\\nimport json\\n\\nclass TestModelAPI(unittest.TestCase):\\n    def test_chat_completion(self):\\n        response = self.client.post('/v1/chat/completions', \\n            json={\\n                'model': 'test-model',\\n                'messages': [{'role': 'user', 'content': 'Hello'}]\\n            })\\n        \\n        self.assertEqual(response.status_code, 200)\\n        data = response.get_json()\\n        \\n        # Verify required fields\\n        self.assertIn('choices', data)\\n        self.assertIn('usage', data)\\n        self.assertIn('prompt_tokens', data['usage'])\\n        self.assertIn('completion_tokens', data['usage'])\\n        \\n    def test_streaming_response(self):\\n        response = self.client.post('/v1/chat/completions',\\n            json={\\n                'model': 'test-model',\\n                'messages': [{'role': 'user', 'content': 'Hello'}],\\n                'stream': True\\n            })\\n        \\n        self.assertEqual(response.status_code, 200)\\n        self.assertEqual(response.content_type, 'text/event-stream')\\n```\\n\\n### Integration Testing\\n\\nTest with the AiMo proxy:\\n\\n```bash\\n# Start your service\\npython your_service.py &\\n\\n# Start proxy\\naimo proxy \\\\\\n  --node-url \\\"https://devnet.aimo.network\\\" \\\\\\n  --secret-key \\\"your-key\\\" \\\\\\n  --endpoint-url \\\"http://localhost:8080\\\"\\n\\n# Test request through proxy\\ncurl -X POST http://localhost:proxy-port/v1/chat/completions \\\\\\n  -H \\\"Content-Type: application/json\\\" \\\\\\n  -d '{\\\"model\\\": \\\"your-model\\\", \\\"messages\\\": [{\\\"role\\\": \\\"user\\\", \\\"content\\\": \\\"test\\\"}]}'\\n```\\n\\n## Troubleshooting\\n\\n### Common Issues\\n\\n#### Missing Usage Object\\n```text\\nError: Response missing usage field\\n```\\n**Solution**: Ensure every response includes proper `usage` object\\n\\n#### Invalid Content-Type\\n```text\\nError: Expected application/json\\n```\\n**Solution**: Set correct Content-Type headers in responses\\n\\n#### Streaming Errors\\n```text\\nError: Stream terminated unexpectedly\\n```\\n**Solution**: Always end streams with `data: [DONE]`\\n\\n### Debug Logging\\n\\nAdd comprehensive logging:\\n\\n```python\\nimport logging\\n\\nlogging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\n@app.route('/v1/chat/completions', methods=['POST'])\\ndef chat_completions():\\n    request_id = uuid.uuid4().hex[:8]\\n    logger.info(f\\\"Request {request_id}: Started\\\")\\n    \\n    try:\\n        # Your processing\\n        logger.info(f\\\"Request {request_id}: Generated {tokens} tokens\\\")\\n        return response\\n    except Exception as e:\\n        logger.error(f\\\"Request {request_id}: Error - {e}\\\")\\n        raise\\n```\\n\\n## Next Steps\\n\\nAfter implementing your API integration:\\n\\n1. **[Set up monitoring](/provider-guide/monitoring)** for your service\\n2. **[Configure pricing](/provider-guide/pricing)** for your models  \\n3. **[Follow best practices](/provider-guide/best-practices)** for production\\n4. **[Register your models](/provider-guide/model-registration)** on the network\\n\\n## Support\\n\\nNeed help with API integration?\\n\\n- **Technical docs**: Complete integration examples\\n- **API support**: integration@aimo.network  \\n- **Community help**: Join our Discord\\n- **Code examples**: GitHub repository with samples\\n\\n---\\n\\n**Ready to deploy?** Continue with [model registration](/provider-guide/model-registration) to make your service available on the network.\",\"document\":[{\"href\":\"/provider-guide/api-integration#api-integration\",\"html\":\"</header>\\n<p>Learn how to integrate your AI service with AiMo Network&#x27;s proxy system.</p>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#api-integration\",\"isPage\":true,\"text\":\"\\nLearn how to integrate your AI service with AiMo Network&#x27;s proxy system.\\n\",\"title\":\"API Integration\",\"titles\":[]},{\"href\":\"/provider-guide/api-integration#integration-overview\",\"html\":\"\\n<p>The AiMo proxy acts as a bridge between the AiMo Network and your AI service, handling authentication, routing, and payment settlement while forwarding requests to your HTTP endpoint.</p>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#integration-overview\",\"isPage\":false,\"text\":\"\\nThe AiMo proxy acts as a bridge between the AiMo Network and your AI service, handling authentication, routing, and payment settlement while forwarding requests to your HTTP endpoint.\\n\",\"title\":\"Integration Overview\",\"titles\":[\"API Integration\"]},{\"href\":\"/provider-guide/api-integration#how-it-works\",\"html\":\"\\n<ol>\\n<li><strong>User requests</strong> are routed through AiMo Network</li>\\n<li><strong>Proxy receives</strong> the request via WebSocket</li>\\n<li><strong>HTTP forwarding</strong> to your service endpoint</li>\\n<li><strong>Response streaming</strong> back through the proxy</li>\\n<li><strong>Payment settlement</strong> based on usage data</li>\\n</ol>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#how-it-works\",\"isPage\":false,\"text\":\"\\n\\nUser requests are routed through AiMo Network\\nProxy receives the request via WebSocket\\nHTTP forwarding to your service endpoint\\nResponse streaming back through the proxy\\nPayment settlement based on usage data\\n\\n\",\"title\":\"How It Works\",\"titles\":[\"API Integration\",\"Integration Overview\"]},{\"href\":\"/provider-guide/api-integration#requestresponse-format\",\"html\":\"\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#requestresponse-format\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Request/Response Format\",\"titles\":[\"API Integration\"]},{\"href\":\"/provider-guide/api-integration#standard-request-format\",\"html\":\"\\n<p>Your service must accept OpenAI-compatible requests:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;model&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;your-model-name&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;messages&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    {</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">&quot;role&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;system&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">&quot;content&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;You are a helpful assistant.&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    {</span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">&quot;role&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;user&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">&quot;content&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Hello, how are you?&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;max_tokens&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">150</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;temperature&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0.7</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;stream&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#standard-request-format\",\"isPage\":false,\"text\":\"\\nYour service must accept OpenAI-compatible requests:\\n{\\n  &quot;model&quot;: &quot;your-model-name&quot;,\\n  &quot;messages&quot;: [\\n    {&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;You are a helpful assistant.&quot;},\\n    {&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello, how are you?&quot;}\\n  ],\\n  &quot;max_tokens&quot;: 150,\\n  &quot;temperature&quot;: 0.7,\\n  &quot;stream&quot;: false\\n}\\n\",\"title\":\"Standard Request Format\",\"titles\":[\"API Integration\",\"Request/Response Format\"]},{\"href\":\"/provider-guide/api-integration#required-response-format\",\"html\":\"\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#required-response-format\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Required Response Format\",\"titles\":[\"API Integration\",\"Request/Response Format\"]},{\"href\":\"/provider-guide/api-integration#non-streaming-response\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;id&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;chatcmpl-123&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;object&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;chat.completion&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;created&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1677652288</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;choices&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: [</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">      &quot;index&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">      &quot;message&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">        &quot;role&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;assistant&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">        &quot;content&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Hello! I&#x27;m doing well, thank you for asking. How can I help you today?&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">      &quot;finish_reason&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;stop&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  ],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;usage&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">    &quot;prompt_tokens&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">13</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">    &quot;completion_tokens&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">17</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">    &quot;total_tokens&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">30</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#non-streaming-response\",\"isPage\":false,\"text\":\"\\n{\\n  &quot;id&quot;: &quot;chatcmpl-123&quot;,\\n  &quot;object&quot;: &quot;chat.completion&quot;,\\n  &quot;created&quot;: 1677652288,\\n  &quot;choices&quot;: [\\n    {\\n      &quot;index&quot;: 0,\\n      &quot;message&quot;: {\\n        &quot;role&quot;: &quot;assistant&quot;,\\n        &quot;content&quot;: &quot;Hello! I&#x27;m doing well, thank you for asking. How can I help you today?&quot;\\n      },\\n      &quot;finish_reason&quot;: &quot;stop&quot;\\n    }\\n  ],\\n  &quot;usage&quot;: {\\n    &quot;prompt_tokens&quot;: 13,\\n    &quot;completion_tokens&quot;: 17,\\n    &quot;total_tokens&quot;: 30\\n  }\\n}\\n\",\"title\":\"Non-Streaming Response\",\"titles\":[\"API Integration\",\"Request/Response Format\",\"Required Response Format\"]},{\"href\":\"/provider-guide/api-integration#streaming-response\",\"html\":\"\\n<p>For streaming responses, use Server-Sent Events format:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">Content-Type</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> text/event-stream</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> {&quot;id&quot;:&quot;chatcmpl-123&quot;,&quot;object&quot;:&quot;chat.completion.chunk&quot;,&quot;created&quot;:1677652288,&quot;choices&quot;:[{&quot;index&quot;:0,&quot;delta&quot;:{&quot;content&quot;:&quot;Hello&quot;},&quot;finish_reason&quot;:null}]}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> {&quot;id&quot;:&quot;chatcmpl-123&quot;,&quot;object&quot;:&quot;chat.completion.chunk&quot;,&quot;created&quot;:1677652288,&quot;choices&quot;:[{&quot;index&quot;:0,&quot;delta&quot;:{&quot;content&quot;:&quot;!&quot;},&quot;finish_reason&quot;:null}]}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> {&quot;id&quot;:&quot;chatcmpl-123&quot;,&quot;object&quot;:&quot;chat.completion.chunk&quot;,&quot;created&quot;:1677652288,&quot;choices&quot;:[{&quot;index&quot;:0,&quot;delta&quot;:{},&quot;finish_reason&quot;:&quot;stop&quot;}],&quot;usage&quot;:{&quot;prompt_tokens&quot;:13,&quot;completion_tokens&quot;:17,&quot;total_tokens&quot;:30}}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#22863A;--shiki-dark:#8DDB8C\\\">data</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> [DONE]</span></span></code></pre>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#streaming-response\",\"isPage\":false,\"text\":\"\\nFor streaming responses, use Server-Sent Events format:\\nContent-Type: text/event-stream\\n \\ndata: {&quot;id&quot;:&quot;chatcmpl-123&quot;,&quot;object&quot;:&quot;chat.completion.chunk&quot;,&quot;created&quot;:1677652288,&quot;choices&quot;:[{&quot;index&quot;:0,&quot;delta&quot;:{&quot;content&quot;:&quot;Hello&quot;},&quot;finish_reason&quot;:null}]}\\n \\ndata: {&quot;id&quot;:&quot;chatcmpl-123&quot;,&quot;object&quot;:&quot;chat.completion.chunk&quot;,&quot;created&quot;:1677652288,&quot;choices&quot;:[{&quot;index&quot;:0,&quot;delta&quot;:{&quot;content&quot;:&quot;!&quot;},&quot;finish_reason&quot;:null}]}\\n \\ndata: {&quot;id&quot;:&quot;chatcmpl-123&quot;,&quot;object&quot;:&quot;chat.completion.chunk&quot;,&quot;created&quot;:1677652288,&quot;choices&quot;:[{&quot;index&quot;:0,&quot;delta&quot;:{},&quot;finish_reason&quot;:&quot;stop&quot;}],&quot;usage&quot;:{&quot;prompt_tokens&quot;:13,&quot;completion_tokens&quot;:17,&quot;total_tokens&quot;:30}}\\n \\ndata: [DONE]\\n\",\"title\":\"Streaming Response\",\"titles\":[\"API Integration\",\"Request/Response Format\",\"Required Response Format\"]},{\"href\":\"/provider-guide/api-integration#implementation-examples\",\"html\":\"\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#implementation-examples\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Implementation Examples\",\"titles\":[\"API Integration\"]},{\"href\":\"/provider-guide/api-integration#openai-compatible-service\",\"html\":\"\\n<p>If your service is already OpenAI-compatible:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flask </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Flask, request, jsonify, Response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> openai</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> json</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">app </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Flask(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">__name__</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">@app.route</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/v1/chat/completions&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">methods</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;POST&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> chat_completions</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">():</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> request.json</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    # Forward to your underlying model</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    response </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> openai.ChatCompletion.create(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">        model</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;model&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">        messages</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;messages&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">        stream</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;stream&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">False</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">        max_tokens</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;max_tokens&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">        temperature</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;temperature&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0.7</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    )</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;stream&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> generate</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">():</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> chunk </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">in</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> response:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">                yield</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> f</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;data: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">json.dumps(chunk)</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">}\\\\n\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            yield</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;data: [DONE]</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">\\\\n\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Response(generate(), </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">mimetype</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;text/event-stream&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> jsonify(response)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">if</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> __name__</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ==</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;__main__&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    app.run(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">host</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0.0.0.0&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">port</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">8080</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#openai-compatible-service\",\"isPage\":false,\"text\":\"\\nIf your service is already OpenAI-compatible:\\nfrom flask import Flask, request, jsonify, Response\\nimport openai\\nimport json\\n \\napp = Flask(__name__)\\n \\n@app.route(&#x27;/v1/chat/completions&#x27;, methods=[&#x27;POST&#x27;])\\ndef chat_completions():\\n    data = request.json\\n    \\n    # Forward to your underlying model\\n    response = openai.ChatCompletion.create(\\n        model=data.get(&#x27;model&#x27;),\\n        messages=data.get(&#x27;messages&#x27;),\\n        stream=data.get(&#x27;stream&#x27;, False),\\n        max_tokens=data.get(&#x27;max_tokens&#x27;),\\n        temperature=data.get(&#x27;temperature&#x27;, 0.7)\\n    )\\n    \\n    if data.get(&#x27;stream&#x27;):\\n        def generate():\\n            for chunk in response:\\n                yield f&quot;data: {json.dumps(chunk)}\\\\n\\\\n&quot;\\n            yield &quot;data: [DONE]\\\\n\\\\n&quot;\\n        \\n        return Response(generate(), mimetype=&#x27;text/event-stream&#x27;)\\n    \\n    return jsonify(response)\\n \\nif __name__ == &#x27;__main__&#x27;:\\n    app.run(host=&#x27;0.0.0.0&#x27;, port=8080)\\n\",\"title\":\"OpenAI-Compatible Service\",\"titles\":[\"API Integration\",\"Implementation Examples\"]},{\"href\":\"/provider-guide/api-integration#custom-service-implementation\",\"html\":\"\\n<p>For custom models, ensure proper usage tracking:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flask </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Flask, request, jsonify, Response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> json</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> uuid</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">app </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Flask(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">__name__</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> count_tokens</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(text):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &quot;&quot;&quot;Simple token counting - replace with your tokenizer&quot;&quot;&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(text.split())</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> generate_response</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(messages, model_name, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">**</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">params):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &quot;&quot;&quot;Your model inference logic here&quot;&quot;&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    # This is where you&#x27;d call your actual model</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    response_text </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;This is a sample response from your model.&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    # Calculate tokens</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    prompt_tokens </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> sum</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(count_tokens(msg[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;content&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> msg </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">in</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> messages)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    completion_tokens </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> count_tokens(response_text)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &#x27;text&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: response_text,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &#x27;prompt_tokens&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: prompt_tokens,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &#x27;completion_tokens&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: completion_tokens</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">@app.route</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/v1/chat/completions&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">methods</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;POST&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> chat_completions</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">():</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> request.json</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    request_id </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> f</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;chatcmpl-</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">uuid.uuid4().hex[:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">8</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">}</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    try</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        # Validate request</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> not</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;messages&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> jsonify({</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;error&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Missing messages&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}), </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">400</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        # Generate response using your model</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        result </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> generate_response(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">            messages</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">data[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;messages&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">            model_name</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;model&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;default&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">            max_tokens</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;max_tokens&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">150</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">            temperature</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;temperature&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0.7</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        )</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        # Prepare usage object - CRITICAL for payment!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        usage </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;prompt_tokens&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: result[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;prompt_tokens&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;completion_tokens&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: result[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;completion_tokens&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;total_tokens&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: result[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;prompt_tokens&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;completion_tokens&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;stream&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">            # Streaming response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> generate</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">():</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                words </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;text&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">].split()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">                # Stream word by word</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">                for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> i, word </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">in</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> enumerate</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(words):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    chunk </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                        &quot;id&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: request_id,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                        &quot;object&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;chat.completion.chunk&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                        &quot;created&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">int</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(time.time()),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                        &quot;choices&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: [{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                            &quot;index&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                            &quot;delta&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: {</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;content&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: word </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot; &quot;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> i </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(words)</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">-</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> else</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> word},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                            &quot;finish_reason&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">None</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                        }]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">                    yield</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> f</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;data: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">json.dumps(chunk)</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">}\\\\n\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    time.sleep(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0.1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)  </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"># Simulate streaming delay</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">                # Final chunk with usage - REQUIRED for payment!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                final_chunk </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                    &quot;id&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: request_id,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                    &quot;object&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;chat.completion.chunk&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                    &quot;created&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">int</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(time.time()),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                    &quot;choices&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: [{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                        &quot;index&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                        &quot;delta&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: {},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                        &quot;finish_reason&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;stop&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    }],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                    &quot;usage&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: usage</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">                yield</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> f</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;data: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">json.dumps(final_chunk)</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">}\\\\n\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">                yield</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;data: [DONE]</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">\\\\n\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Response(generate(), </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">mimetype</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;text/event-stream&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        else</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">            # Non-streaming response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> jsonify({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                &quot;id&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: request_id,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                &quot;object&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;chat.completion&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                &quot;created&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">int</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(time.time()),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                &quot;choices&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: [{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                    &quot;index&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                    &quot;message&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                        &quot;role&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;assistant&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                        &quot;content&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: result[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;text&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                    &quot;finish_reason&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;stop&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                }],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                &quot;usage&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: usage</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    except</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> Exception</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> as</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> e:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> jsonify({</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;error&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">str</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(e)}), </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">500</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">@app.route</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/health&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">methods</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;GET&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> health_check</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">():</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> jsonify({</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;status&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;healthy&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;timestamp&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: time.time()})</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">if</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> __name__</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ==</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;__main__&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    app.run(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">host</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0.0.0.0&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">port</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">8080</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#custom-service-implementation\",\"isPage\":false,\"text\":\"\\nFor custom models, ensure proper usage tracking:\\nfrom flask import Flask, request, jsonify, Response\\nimport json\\nimport time\\nimport uuid\\n \\napp = Flask(__name__)\\n \\ndef count_tokens(text):\\n    &quot;&quot;&quot;Simple token counting - replace with your tokenizer&quot;&quot;&quot;\\n    return len(text.split())\\n \\ndef generate_response(messages, model_name, **params):\\n    &quot;&quot;&quot;Your model inference logic here&quot;&quot;&quot;\\n    # This is where you&#x27;d call your actual model\\n    response_text = &quot;This is a sample response from your model.&quot;\\n    \\n    # Calculate tokens\\n    prompt_tokens = sum(count_tokens(msg[&#x27;content&#x27;]) for msg in messages)\\n    completion_tokens = count_tokens(response_text)\\n    \\n    return {\\n        &#x27;text&#x27;: response_text,\\n        &#x27;prompt_tokens&#x27;: prompt_tokens,\\n        &#x27;completion_tokens&#x27;: completion_tokens\\n    }\\n \\n@app.route(&#x27;/v1/chat/completions&#x27;, methods=[&#x27;POST&#x27;])\\ndef chat_completions():\\n    data = request.json\\n    request_id = f&quot;chatcmpl-{uuid.uuid4().hex[:8]}&quot;\\n    \\n    try:\\n        # Validate request\\n        if not data.get(&#x27;messages&#x27;):\\n            return jsonify({&#x27;error&#x27;: &#x27;Missing messages&#x27;}), 400\\n        \\n        # Generate response using your model\\n        result = generate_response(\\n            messages=data[&#x27;messages&#x27;],\\n            model_name=data.get(&#x27;model&#x27;, &#x27;default&#x27;),\\n            max_tokens=data.get(&#x27;max_tokens&#x27;, 150),\\n            temperature=data.get(&#x27;temperature&#x27;, 0.7)\\n        )\\n        \\n        # Prepare usage object - CRITICAL for payment!\\n        usage = {\\n            &quot;prompt_tokens&quot;: result[&#x27;prompt_tokens&#x27;],\\n            &quot;completion_tokens&quot;: result[&#x27;completion_tokens&#x27;],\\n            &quot;total_tokens&quot;: result[&#x27;prompt_tokens&#x27;] + result[&#x27;completion_tokens&#x27;]\\n        }\\n        \\n        if data.get(&#x27;stream&#x27;):\\n            # Streaming response\\n            def generate():\\n                words = result[&#x27;text&#x27;].split()\\n                \\n                # Stream word by word\\n                for i, word in enumerate(words):\\n                    chunk = {\\n                        &quot;id&quot;: request_id,\\n                        &quot;object&quot;: &quot;chat.completion.chunk&quot;,\\n                        &quot;created&quot;: int(time.time()),\\n                        &quot;choices&quot;: [{\\n                            &quot;index&quot;: 0,\\n                            &quot;delta&quot;: {&quot;content&quot;: word + &quot; &quot; if i &lt; len(words)-1 else word},\\n                            &quot;finish_reason&quot;: None\\n                        }]\\n                    }\\n                    yield f&quot;data: {json.dumps(chunk)}\\\\n\\\\n&quot;\\n                    time.sleep(0.1)  # Simulate streaming delay\\n                \\n                # Final chunk with usage - REQUIRED for payment!\\n                final_chunk = {\\n                    &quot;id&quot;: request_id,\\n                    &quot;object&quot;: &quot;chat.completion.chunk&quot;,\\n                    &quot;created&quot;: int(time.time()),\\n                    &quot;choices&quot;: [{\\n                        &quot;index&quot;: 0,\\n                        &quot;delta&quot;: {},\\n                        &quot;finish_reason&quot;: &quot;stop&quot;\\n                    }],\\n                    &quot;usage&quot;: usage\\n                }\\n                yield f&quot;data: {json.dumps(final_chunk)}\\\\n\\\\n&quot;\\n                yield &quot;data: [DONE]\\\\n\\\\n&quot;\\n            \\n            return Response(generate(), mimetype=&#x27;text/event-stream&#x27;)\\n        \\n        else:\\n            # Non-streaming response\\n            return jsonify({\\n                &quot;id&quot;: request_id,\\n                &quot;object&quot;: &quot;chat.completion&quot;,\\n                &quot;created&quot;: int(time.time()),\\n                &quot;choices&quot;: [{\\n                    &quot;index&quot;: 0,\\n                    &quot;message&quot;: {\\n                        &quot;role&quot;: &quot;assistant&quot;,\\n                        &quot;content&quot;: result[&#x27;text&#x27;]\\n                    },\\n                    &quot;finish_reason&quot;: &quot;stop&quot;\\n                }],\\n                &quot;usage&quot;: usage\\n            })\\n    \\n    except Exception as e:\\n        return jsonify({&#x27;error&#x27;: str(e)}), 500\\n \\n@app.route(&#x27;/health&#x27;, methods=[&#x27;GET&#x27;])\\ndef health_check():\\n    return jsonify({&#x27;status&#x27;: &#x27;healthy&#x27;, &#x27;timestamp&#x27;: time.time()})\\n \\nif __name__ == &#x27;__main__&#x27;:\\n    app.run(host=&#x27;0.0.0.0&#x27;, port=8080)\\n\",\"title\":\"Custom Service Implementation\",\"titles\":[\"API Integration\",\"Implementation Examples\"]},{\"href\":\"/provider-guide/api-integration#nodejs-implementation\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> express</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> require</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;express&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> app</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> express</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">();</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">app.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">use</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(express.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">json</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">());</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> countTokens</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">text</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Simple token counting - replace with your tokenizer</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> text.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">split</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27; &#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">).</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">length</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">async</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> function</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> generateResponse</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">messages</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">model</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">params</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Your model processing logic here</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> responseText</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;This is a sample response from your Node.js model.&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> promptTokens</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> messages.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">reduce</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">((</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">sum</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">msg</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> sum </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> countTokens</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(msg.content), </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> completionTokens</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> countTokens</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(responseText);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        text: responseText,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        promptTokens,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        completionTokens</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    };</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">app.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">post</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/v1/chat/completions&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">async</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">req</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">res</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    const</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">model</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">messages</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">stream</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">max_tokens</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">temperature</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> req.body;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> requestId</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> `chatcmpl-${</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">Math</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">random</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">().</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">toString</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">36</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">).</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">substr</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">2</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">9</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">)</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">}`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    try</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">messages </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">||</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> messages.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">length</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ===</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">status</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">400</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">).</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">json</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ error: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Missing messages&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Generate response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> result</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> generateResponse</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(messages, model, { max_tokens, temperature });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Calculate token usage - CRITICAL for payment!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> usage</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            prompt_tokens: result.promptTokens,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            completion_tokens: result.completionTokens,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            total_tokens: result.promptTokens </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result.completionTokens</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        };</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (stream) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">setHeader</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Content-Type&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;text/event-stream&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">setHeader</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Cache-Control&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;no-cache&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">setHeader</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Connection&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;keep-alive&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> words</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result.text.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">split</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27; &#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">            // Stream response chunks</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">let</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> i </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">; i </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> words.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">length</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">; i</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">++</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">                const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> chunk</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    id: requestId,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    object: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;chat.completion.chunk&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    created: Math.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">floor</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(Date.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">now</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">/</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    choices: [{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                        index: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                        delta: { content: words[i] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (i </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> words.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">length</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> -</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ?</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27; &#x27;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> :</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                        finish_reason: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">null</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    }]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                };</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">write</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">`data: ${</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">JSON</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">stringify</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">(</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">chunk</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">)</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">}</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">\\\\n\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">                await</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> new</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> Promise</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">resolve</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =&gt;</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> setTimeout</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(resolve, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">100</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)); </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Streaming delay</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">            // Send final chunk with usage - REQUIRED for payment!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> finalChunk</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                id: requestId,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                object: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;chat.completion.chunk&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                created: Math.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">floor</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(Date.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">now</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">/</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                choices: [{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    index: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    delta: {},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    finish_reason: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;stop&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                }],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                usage</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            };</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">write</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">`data: ${</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">JSON</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">stringify</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">(</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">finalChunk</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">)</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">}</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">\\\\n\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">write</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;data: [DONE]</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">\\\\n\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">else</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">            // Non-streaming response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">json</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                id: requestId,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                object: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;chat.completion&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                created: Math.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">floor</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(Date.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">now</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">/</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 1000</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                choices: [{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    index: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    message: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                        role: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;assistant&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                        content: result.text</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    finish_reason: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;stop&#x27;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                }],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                usage</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">catch</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (error) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">status</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">500</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">).</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">json</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ error: error.message });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">});</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">app.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">get</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/health&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">req</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">res</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">json</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({ status: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;healthy&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, timestamp: Date.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">now</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">});</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> PORT</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> process.env.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">PORT</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ||</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 8080</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">app.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">listen</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">PORT</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0.0.0.0&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, () </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    console.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">log</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">`Model server running on port ${</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">PORT</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">}`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">});</span></span></code></pre>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#nodejs-implementation\",\"isPage\":false,\"text\":\"\\nconst express = require(&#x27;express&#x27;);\\nconst app = express();\\n \\napp.use(express.json());\\n \\nfunction countTokens(text) {\\n    // Simple token counting - replace with your tokenizer\\n    return text.split(&#x27; &#x27;).length;\\n}\\n \\nasync function generateResponse(messages, model, params) {\\n    // Your model processing logic here\\n    const responseText = &quot;This is a sample response from your Node.js model.&quot;;\\n    \\n    const promptTokens = messages.reduce((sum, msg) =&gt; sum + countTokens(msg.content), 0);\\n    const completionTokens = countTokens(responseText);\\n    \\n    return {\\n        text: responseText,\\n        promptTokens,\\n        completionTokens\\n    };\\n}\\n \\napp.post(&#x27;/v1/chat/completions&#x27;, async (req, res) =&gt; {\\n    const { model, messages, stream, max_tokens, temperature } = req.body;\\n    const requestId = `chatcmpl-${Math.random().toString(36).substr(2, 9)}`;\\n    \\n    try {\\n        if (!messages || messages.length === 0) {\\n            return res.status(400).json({ error: &#x27;Missing messages&#x27; });\\n        }\\n        \\n        // Generate response\\n        const result = await generateResponse(messages, model, { max_tokens, temperature });\\n        \\n        // Calculate token usage - CRITICAL for payment!\\n        const usage = {\\n            prompt_tokens: result.promptTokens,\\n            completion_tokens: result.completionTokens,\\n            total_tokens: result.promptTokens + result.completionTokens\\n        };\\n        \\n        if (stream) {\\n            res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/event-stream&#x27;);\\n            res.setHeader(&#x27;Cache-Control&#x27;, &#x27;no-cache&#x27;);\\n            res.setHeader(&#x27;Connection&#x27;, &#x27;keep-alive&#x27;);\\n            \\n            const words = result.text.split(&#x27; &#x27;);\\n            \\n            // Stream response chunks\\n            for (let i = 0; i &lt; words.length; i++) {\\n                const chunk = {\\n                    id: requestId,\\n                    object: &#x27;chat.completion.chunk&#x27;,\\n                    created: Math.floor(Date.now() / 1000),\\n                    choices: [{\\n                        index: 0,\\n                        delta: { content: words[i] + (i &lt; words.length - 1 ? &#x27; &#x27; : &#x27;&#x27;) },\\n                        finish_reason: null\\n                    }]\\n                };\\n                \\n                res.write(`data: ${JSON.stringify(chunk)}\\\\n\\\\n`);\\n                await new Promise(resolve =&gt; setTimeout(resolve, 100)); // Streaming delay\\n            }\\n            \\n            // Send final chunk with usage - REQUIRED for payment!\\n            const finalChunk = {\\n                id: requestId,\\n                object: &#x27;chat.completion.chunk&#x27;,\\n                created: Math.floor(Date.now() / 1000),\\n                choices: [{\\n                    index: 0,\\n                    delta: {},\\n                    finish_reason: &#x27;stop&#x27;\\n                }],\\n                usage\\n            };\\n            \\n            res.write(`data: ${JSON.stringify(finalChunk)}\\\\n\\\\n`);\\n            res.write(&#x27;data: [DONE]\\\\n\\\\n&#x27;);\\n            res.end();\\n        } else {\\n            // Non-streaming response\\n            res.json({\\n                id: requestId,\\n                object: &#x27;chat.completion&#x27;,\\n                created: Math.floor(Date.now() / 1000),\\n                choices: [{\\n                    index: 0,\\n                    message: {\\n                        role: &#x27;assistant&#x27;,\\n                        content: result.text\\n                    },\\n                    finish_reason: &#x27;stop&#x27;\\n                }],\\n                usage\\n            });\\n        }\\n    } catch (error) {\\n        res.status(500).json({ error: error.message });\\n    }\\n});\\n \\napp.get(&#x27;/health&#x27;, (req, res) =&gt; {\\n    res.json({ status: &#x27;healthy&#x27;, timestamp: Date.now() });\\n});\\n \\nconst PORT = process.env.PORT || 8080;\\napp.listen(PORT, &#x27;0.0.0.0&#x27;, () =&gt; {\\n    console.log(`Model server running on port ${PORT}`);\\n});\\n\",\"title\":\"Node.js Implementation\",\"titles\":[\"API Integration\",\"Implementation Examples\"]},{\"href\":\"/provider-guide/api-integration#advanced-features\",\"html\":\"\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#advanced-features\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Advanced Features\",\"titles\":[\"API Integration\"]},{\"href\":\"/provider-guide/api-integration#custom-parameters\",\"html\":\"\\n<p>You can support model-specific parameters:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;model&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;your-model&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;messages&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: [</span><span style=\\\"color:#B31D28;font-style:italic;--shiki-dark:#FF938A;--shiki-dark-font-style:italic\\\">...</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;custom_params&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">    &quot;creativity_level&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1.2</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">    &quot;style&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;technical&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">    &quot;domain&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;healthcare&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n<p>Handle these in your service:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">@app.route</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/v1/chat/completions&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">methods</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;POST&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> chat_completions</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">():</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> request.json</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    # Extract custom parameters</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    custom_params </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;custom_params&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, {})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    creativity </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> custom_params.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;creativity_level&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1.0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    style </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> custom_params.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;style&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;general&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    # Use parameters in your model</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    result </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> your_model.generate(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">        messages</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">data[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;messages&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">        creativity</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">creativity,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">        style</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">style</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    )</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    # Return standard format with usage</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> jsonify({</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">...</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#custom-parameters\",\"isPage\":false,\"text\":\"\\nYou can support model-specific parameters:\\n{\\n  &quot;model&quot;: &quot;your-model&quot;,\\n  &quot;messages&quot;: [...],\\n  &quot;custom_params&quot;: {\\n    &quot;creativity_level&quot;: 1.2,\\n    &quot;style&quot;: &quot;technical&quot;,\\n    &quot;domain&quot;: &quot;healthcare&quot;\\n  }\\n}\\nHandle these in your service:\\n@app.route(&#x27;/v1/chat/completions&#x27;, methods=[&#x27;POST&#x27;])\\ndef chat_completions():\\n    data = request.json\\n    \\n    # Extract custom parameters\\n    custom_params = data.get(&#x27;custom_params&#x27;, {})\\n    creativity = custom_params.get(&#x27;creativity_level&#x27;, 1.0)\\n    style = custom_params.get(&#x27;style&#x27;, &#x27;general&#x27;)\\n    \\n    # Use parameters in your model\\n    result = your_model.generate(\\n        messages=data[&#x27;messages&#x27;],\\n        creativity=creativity,\\n        style=style\\n    )\\n    \\n    # Return standard format with usage\\n    return jsonify({...})\\n\",\"title\":\"Custom Parameters\",\"titles\":[\"API Integration\",\"Advanced Features\"]},{\"href\":\"/provider-guide/api-integration#content-filtering\",\"html\":\"\\n<p>Implement safety measures:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> content_filter</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(text):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &quot;&quot;&quot;Filter inappropriate content&quot;&quot;&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    # Your content filtering logic</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    blocked_patterns </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> [</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;harmful_word1&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;harmful_word2&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> pattern </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">in</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> blocked_patterns:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> pattern.lower() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">in</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> text.lower():</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            raise</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> ValueError</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Content violates safety guidelines&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> text</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">@app.route</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/v1/chat/completions&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">methods</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;POST&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> chat_completions</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">():</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> request.json</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    # Filter input</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> message </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">in</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> data[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;messages&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        message[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;content&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> content_filter(message[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;content&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    # Generate response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    response </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> generate_response(data)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    # Filter output</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    response[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;choices&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">][</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">][</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;message&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">][</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;content&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> content_filter(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        response[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;choices&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">][</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">][</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;message&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">][</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;content&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    )</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> jsonify(response)</span></span></code></pre>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#content-filtering\",\"isPage\":false,\"text\":\"\\nImplement safety measures:\\ndef content_filter(text):\\n    &quot;&quot;&quot;Filter inappropriate content&quot;&quot;&quot;\\n    # Your content filtering logic\\n    blocked_patterns = [&#x27;harmful_word1&#x27;, &#x27;harmful_word2&#x27;]\\n    \\n    for pattern in blocked_patterns:\\n        if pattern.lower() in text.lower():\\n            raise ValueError(&quot;Content violates safety guidelines&quot;)\\n    \\n    return text\\n \\n@app.route(&#x27;/v1/chat/completions&#x27;, methods=[&#x27;POST&#x27;])\\ndef chat_completions():\\n    data = request.json\\n    \\n    # Filter input\\n    for message in data[&#x27;messages&#x27;]:\\n        message[&#x27;content&#x27;] = content_filter(message[&#x27;content&#x27;])\\n    \\n    # Generate response\\n    response = generate_response(data)\\n    \\n    # Filter output\\n    response[&#x27;choices&#x27;][0][&#x27;message&#x27;][&#x27;content&#x27;] = content_filter(\\n        response[&#x27;choices&#x27;][0][&#x27;message&#x27;][&#x27;content&#x27;]\\n    )\\n    \\n    return jsonify(response)\\n\",\"title\":\"Content Filtering\",\"titles\":[\"API Integration\",\"Advanced Features\"]},{\"href\":\"/provider-guide/api-integration#error-handling\",\"html\":\"\\n<p>Implement comprehensive error handling:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> functools </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> wraps</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> handle_errors</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(func):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">    @wraps</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(func)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> wrapper</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">args, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">**</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">kwargs):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        try</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> func(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">args, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">**</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">kwargs)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        except</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> ValueError</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> as</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> e:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> jsonify({</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;error&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">f</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Validation error: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">str</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(e)</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">}</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}), </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">400</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        except</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> RuntimeError</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> as</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> e:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> jsonify({</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;error&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">f</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Model error: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">str</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(e)</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">}</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}), </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">500</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        except</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> Exception</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> as</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> e:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> jsonify({</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;error&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Internal server error&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}), </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">500</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> wrapper</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">@app.route</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/v1/chat/completions&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">methods</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;POST&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">@handle_errors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> chat_completions</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">():</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    # Your implementation</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    pass</span></span></code></pre>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#error-handling\",\"isPage\":false,\"text\":\"\\nImplement comprehensive error handling:\\nfrom functools import wraps\\n \\ndef handle_errors(func):\\n    @wraps(func)\\n    def wrapper(*args, **kwargs):\\n        try:\\n            return func(*args, **kwargs)\\n        except ValueError as e:\\n            return jsonify({&#x27;error&#x27;: f&#x27;Validation error: {str(e)}&#x27;}), 400\\n        except RuntimeError as e:\\n            return jsonify({&#x27;error&#x27;: f&#x27;Model error: {str(e)}&#x27;}), 500\\n        except Exception as e:\\n            return jsonify({&#x27;error&#x27;: &#x27;Internal server error&#x27;}), 500\\n    return wrapper\\n \\n@app.route(&#x27;/v1/chat/completions&#x27;, methods=[&#x27;POST&#x27;])\\n@handle_errors\\ndef chat_completions():\\n    # Your implementation\\n    pass\\n\",\"title\":\"Error Handling\",\"titles\":[\"API Integration\",\"Advanced Features\"]},{\"href\":\"/provider-guide/api-integration#payment-requirements\",\"html\":\"\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#payment-requirements\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Payment Requirements\",\"titles\":[\"API Integration\"]},{\"href\":\"/provider-guide/api-integration#critical-usage-object\",\"html\":\"\\n<strong>Every response must include accurate token usage data:</strong>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">  &quot;usage&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">    &quot;prompt_tokens&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">25</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">    &quot;completion_tokens&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">15</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#8DDB8C\\\">    &quot;total_tokens&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">40</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#critical-usage-object\",\"isPage\":false,\"text\":\"\\nEvery response must include accurate token usage data:\\n{\\n  &quot;usage&quot;: {\\n    &quot;prompt_tokens&quot;: 25,\\n    &quot;completion_tokens&quot;: 15,\\n    &quot;total_tokens&quot;: 40\\n  }\\n}\\n\",\"title\":\"Critical Usage Object\",\"titles\":[\"API Integration\",\"Payment Requirements\"]},{\"href\":\"/provider-guide/api-integration#token-counting-best-practices\",\"html\":\"\\n<ol>\\n<li><strong>Use your model&#x27;s tokenizer</strong> for accurate counting</li>\\n<li><strong>Include all prompt tokens</strong> (system + user messages)</li>\\n<li><strong>Count actual generated tokens</strong> in completion</li>\\n<li>\\n<strong>Verify total = prompt + completion</strong>\\n</li>\\n</ol>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#token-counting-best-practices\",\"isPage\":false,\"text\":\"\\n\\nUse your model&#x27;s tokenizer for accurate counting\\nInclude all prompt tokens (system + user messages)\\nCount actual generated tokens in completion\\n\\nVerify total = prompt + completion\\n\\n\\n\",\"title\":\"Token Counting Best Practices\",\"titles\":[\"API Integration\",\"Payment Requirements\"]},{\"href\":\"/provider-guide/api-integration#streaming-usage-requirements\",\"html\":\"\\n<p>For streaming responses:</p>\\n<ul>\\n<li><strong>Include usage in final chunk</strong> before <code>[DONE]</code></li>\\n<li><strong>Count all streamed tokens</strong> accurately</li>\\n<li>\\n<strong>Don&#x27;t include usage in intermediate chunks</strong>\\n</li>\\n</ul>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#streaming-usage-requirements\",\"isPage\":false,\"text\":\"\\nFor streaming responses:\\n\\nInclude usage in final chunk before [DONE]\\nCount all streamed tokens accurately\\n\\nDon&#x27;t include usage in intermediate chunks\\n\\n\\n\",\"title\":\"Streaming Usage Requirements\",\"titles\":[\"API Integration\",\"Payment Requirements\"]},{\"href\":\"/provider-guide/api-integration#testing-your-integration\",\"html\":\"\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#testing-your-integration\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Testing Your Integration\",\"titles\":[\"API Integration\"]},{\"href\":\"/provider-guide/api-integration#unit-tests\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> unittest</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> json</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">class</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> TestModelAPI</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">unittest</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#6CB6FF\\\">TestCase</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> test_chat_completion</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(self):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        response </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> self</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.client.post(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/v1/chat/completions&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">            json</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                &#x27;model&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;test-model&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                &#x27;messages&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: [{</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;role&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;user&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;content&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Hello&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">        self</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.assertEqual(response.status_code, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">200</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> response.get_json()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        # Verify required fields</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">        self</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.assertIn(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;choices&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, data)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">        self</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.assertIn(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;usage&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, data)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">        self</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.assertIn(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;prompt_tokens&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, data[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;usage&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">        self</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.assertIn(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;completion_tokens&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, data[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;usage&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> test_streaming_response</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(self):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        response </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> self</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.client.post(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/v1/chat/completions&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">            json</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                &#x27;model&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;test-model&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                &#x27;messages&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: [{</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;role&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;user&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;content&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Hello&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                &#x27;stream&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">True</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">        self</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.assertEqual(response.status_code, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">200</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">        self</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.assertEqual(response.content_type, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;text/event-stream&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#unit-tests\",\"isPage\":false,\"text\":\"\\nimport unittest\\nimport json\\n \\nclass TestModelAPI(unittest.TestCase):\\n    def test_chat_completion(self):\\n        response = self.client.post(&#x27;/v1/chat/completions&#x27;, \\n            json={\\n                &#x27;model&#x27;: &#x27;test-model&#x27;,\\n                &#x27;messages&#x27;: [{&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;Hello&#x27;}]\\n            })\\n        \\n        self.assertEqual(response.status_code, 200)\\n        data = response.get_json()\\n        \\n        # Verify required fields\\n        self.assertIn(&#x27;choices&#x27;, data)\\n        self.assertIn(&#x27;usage&#x27;, data)\\n        self.assertIn(&#x27;prompt_tokens&#x27;, data[&#x27;usage&#x27;])\\n        self.assertIn(&#x27;completion_tokens&#x27;, data[&#x27;usage&#x27;])\\n        \\n    def test_streaming_response(self):\\n        response = self.client.post(&#x27;/v1/chat/completions&#x27;,\\n            json={\\n                &#x27;model&#x27;: &#x27;test-model&#x27;,\\n                &#x27;messages&#x27;: [{&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;Hello&#x27;}],\\n                &#x27;stream&#x27;: True\\n            })\\n        \\n        self.assertEqual(response.status_code, 200)\\n        self.assertEqual(response.content_type, &#x27;text/event-stream&#x27;)\\n\",\"title\":\"Unit Tests\",\"titles\":[\"API Integration\",\"Testing Your Integration\"]},{\"href\":\"/provider-guide/api-integration#integration-testing\",\"html\":\"\\n<p>Test with the AiMo proxy:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"># Start your service</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">python</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> your_service.py</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> &amp;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"># Start proxy</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">aimo</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> proxy</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\"> \\\\</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  --node-url</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;https://devnet.aimo.network&quot;</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\"> \\\\</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  --secret-key</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;your-key&quot;</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\"> \\\\</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  --endpoint-url</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;http://localhost:8080&quot;</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"># Test request through proxy</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">curl</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> -X</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> POST</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> http://localhost:proxy-port/v1/chat/completions</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\"> \\\\</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  -H</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Content-Type: application/json&quot;</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\"> \\\\</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">  -d</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;{&quot;model&quot;: &quot;your-model&quot;, &quot;messages&quot;: [{&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;test&quot;}]}&#x27;</span></span></code></pre>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#integration-testing\",\"isPage\":false,\"text\":\"\\nTest with the AiMo proxy:\\n# Start your service\\npython your_service.py &amp;\\n \\n# Start proxy\\naimo proxy \\\\\\n  --node-url &quot;https://devnet.aimo.network&quot; \\\\\\n  --secret-key &quot;your-key&quot; \\\\\\n  --endpoint-url &quot;http://localhost:8080&quot;\\n \\n# Test request through proxy\\ncurl -X POST http://localhost:proxy-port/v1/chat/completions \\\\\\n  -H &quot;Content-Type: application/json&quot; \\\\\\n  -d &#x27;{&quot;model&quot;: &quot;your-model&quot;, &quot;messages&quot;: [{&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;test&quot;}]}&#x27;\\n\",\"title\":\"Integration Testing\",\"titles\":[\"API Integration\",\"Testing Your Integration\"]},{\"href\":\"/provider-guide/api-integration#troubleshooting\",\"html\":\"\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#troubleshooting\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Troubleshooting\",\"titles\":[\"API Integration\"]},{\"href\":\"/provider-guide/api-integration#common-issues\",\"html\":\"\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#common-issues\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Common Issues\",\"titles\":[\"API Integration\",\"Troubleshooting\"]},{\"href\":\"/provider-guide/api-integration#missing-usage-object\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>Error: Response missing usage field</span></span></code></pre>\\n<p><strong>Solution</strong>: Ensure every response includes proper <code>usage</code> object</p>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#missing-usage-object\",\"isPage\":false,\"text\":\"\\nError: Response missing usage field\\nSolution: Ensure every response includes proper usage object\\n\",\"title\":\"Missing Usage Object\",\"titles\":[\"API Integration\",\"Troubleshooting\",\"Common Issues\"]},{\"href\":\"/provider-guide/api-integration#invalid-content-type\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>Error: Expected application/json</span></span></code></pre>\\n<p><strong>Solution</strong>: Set correct Content-Type headers in responses</p>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#invalid-content-type\",\"isPage\":false,\"text\":\"\\nError: Expected application/json\\nSolution: Set correct Content-Type headers in responses\\n\",\"title\":\"Invalid Content-Type\",\"titles\":[\"API Integration\",\"Troubleshooting\",\"Common Issues\"]},{\"href\":\"/provider-guide/api-integration#streaming-errors\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span>Error: Stream terminated unexpectedly</span></span></code></pre>\\n<p><strong>Solution</strong>: Always end streams with <code>data: [DONE]</code></p>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#streaming-errors\",\"isPage\":false,\"text\":\"\\nError: Stream terminated unexpectedly\\nSolution: Always end streams with data: [DONE]\\n\",\"title\":\"Streaming Errors\",\"titles\":[\"API Integration\",\"Troubleshooting\",\"Common Issues\"]},{\"href\":\"/provider-guide/api-integration#debug-logging\",\"html\":\"\\n<p>Add comprehensive logging:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> logging</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">logging.basicConfig(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">level</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">logging.</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">INFO</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">logger </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> logging.getLogger(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">__name__</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">@app.route</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/v1/chat/completions&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">methods</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;POST&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> chat_completions</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">():</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    request_id </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> uuid.uuid4().hex[:</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">8</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    logger.info(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">f</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Request </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">request_id</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">}</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">: Started&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    try</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        # Your processing</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        logger.info(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">f</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Request </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">request_id</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">}</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">: Generated </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">tokens</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">}</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> tokens&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    except</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> Exception</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> as</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> e:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        logger.error(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">f</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Request </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">request_id</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">}</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">: Error - </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">e</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">}</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        raise</span></span></code></pre>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#debug-logging\",\"isPage\":false,\"text\":\"\\nAdd comprehensive logging:\\nimport logging\\n \\nlogging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n \\n@app.route(&#x27;/v1/chat/completions&#x27;, methods=[&#x27;POST&#x27;])\\ndef chat_completions():\\n    request_id = uuid.uuid4().hex[:8]\\n    logger.info(f&quot;Request {request_id}: Started&quot;)\\n    \\n    try:\\n        # Your processing\\n        logger.info(f&quot;Request {request_id}: Generated {tokens} tokens&quot;)\\n        return response\\n    except Exception as e:\\n        logger.error(f&quot;Request {request_id}: Error - {e}&quot;)\\n        raise\\n\",\"title\":\"Debug Logging\",\"titles\":[\"API Integration\",\"Troubleshooting\"]},{\"href\":\"/provider-guide/api-integration#next-steps\",\"html\":\"\\n<p>After implementing your API integration:</p>\\n<ol>\\n<li><strong><a href=\\\"/provider-guide/monitoring\\\">Set up monitoring</a></strong> for your service</li>\\n<li><strong><a href=\\\"/provider-guide/pricing\\\">Configure pricing</a></strong> for your models</li>\\n<li><strong><a href=\\\"/provider-guide/best-practices\\\">Follow best practices</a></strong> for production</li>\\n<li><strong><a href=\\\"/provider-guide/model-registration\\\">Register your models</a></strong> on the network</li>\\n</ol>\\n\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#next-steps\",\"isPage\":false,\"text\":\"\\nAfter implementing your API integration:\\n\\nSet up monitoring for your service\\nConfigure pricing for your models\\nFollow best practices for production\\nRegister your models on the network\\n\\n\",\"title\":\"Next Steps\",\"titles\":[\"API Integration\"]},{\"href\":\"/provider-guide/api-integration#support\",\"html\":\"\\n<p>Need help with API integration?</p>\\n<ul>\\n<li><strong>Technical docs</strong>: Complete integration examples</li>\\n<li><strong>API support</strong>: <a href=\\\"mailto:integration@aimo.network\\\">integration@aimo.network</a></li>\\n<li><strong>Community help</strong>: Join our Discord</li>\\n<li><strong>Code examples</strong>: GitHub repository with samples</li>\\n</ul>\\n<hr/>\\n<p><strong>Ready to deploy?</strong> Continue with <a href=\\\"/provider-guide/model-registration\\\">model registration</a> to make your service available on the network.</p>\",\"id\":\"docs/pages/provider-guide/api-integration.mdx#support\",\"isPage\":false,\"text\":\"\\nNeed help with API integration?\\n\\nTechnical docs: Complete integration examples\\nAPI support: integration@aimo.network\\nCommunity help: Join our Discord\\nCode examples: GitHub repository with samples\\n\\n\\nReady to deploy? Continue with model registration to make your service available on the network.\",\"title\":\"Support\",\"titles\":[\"API Integration\"]}]}}"
