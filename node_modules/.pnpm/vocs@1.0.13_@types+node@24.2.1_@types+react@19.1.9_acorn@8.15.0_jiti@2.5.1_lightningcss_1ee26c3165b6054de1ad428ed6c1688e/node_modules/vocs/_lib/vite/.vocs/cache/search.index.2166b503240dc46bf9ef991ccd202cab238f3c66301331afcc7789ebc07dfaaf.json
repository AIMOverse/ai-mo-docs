"{\"value\":{\"mdx\":\"# API Integration Examples\\n\\n**Remember**: All examples below must include proper `usage` objects in responses to ensure payment. See the Critical Payment Warning in the Service Integration section.\\n\\n## OpenAI-Compatible Service\\n\\nIf your service is OpenAI-compatible, minimal changes are needed:\\n\\n```python\\nfrom flask import Flask, request, jsonify, Response\\nimport openai\\nimport json\\n\\napp = Flask(__name__)\\n\\n@app.route('/chat/completions', methods=['POST'])\\ndef chat_completions():\\n    data = request.json\\n    \\n    # Forward to your underlying model\\n    response = openai.ChatCompletion.create(\\n        model=data.get('model'),\\n        messages=data.get('messages'),\\n        stream=data.get('stream', False),\\n        max_tokens=data.get('max_tokens'),\\n        temperature=data.get('temperature', 0.7)\\n    )\\n    \\n    if data.get('stream'):\\n        def generate():\\n            for chunk in response:\\n                yield f\\\"data: {json.dumps(chunk)}\\\\n\\\\n\\\"\\n            yield \\\"data: [DONE]\\\\n\\\\n\\\"\\n        \\n        return Response(generate(), mimetype='text/event-stream')\\n    \\n    return jsonify(response)\\n\\nif __name__ == '__main__':\\n    app.run(host='0.0.0.0', port=8080)\\n```\\n\\n## Custom Service Example\\n\\nFor custom implementations, ensure you return proper usage information:\\n\\n```javascript\\nconst express = require('express');\\nconst app = express();\\n\\napp.use(express.json());\\n\\napp.post('/chat/completions', async (req, res) => {\\n  const { model, messages, stream, max_tokens } = req.body;\\n  \\n  // Your model processing logic here\\n  const response = await processRequest(messages, model);\\n  \\n  // Calculate token usage - CRITICAL for payment!\\n  const usage = {\\n    prompt_tokens: calculatePromptTokens(messages),\\n    completion_tokens: calculateCompletionTokens(response),\\n    total_tokens: 0\\n  };\\n  usage.total_tokens = usage.prompt_tokens + usage.completion_tokens;\\n  \\n  if (stream) {\\n    res.setHeader('Content-Type', 'text/event-stream');\\n    \\n    // Stream response chunks\\n    for (const chunk of response.chunks) {\\n      res.write(`data: ${JSON.stringify({\\n        choices: [{ delta: { content: chunk } }]\\n      })}\\\\n\\\\n`);\\n    }\\n    \\n    // Send final chunk with usage - REQUIRED for payment!\\n    res.write(`data: ${JSON.stringify({\\n      choices: [{ finish_reason: \\\"stop\\\" }],\\n      usage\\n    })}\\\\n\\\\n`);\\n    \\n    res.write('data: [DONE]\\\\n\\\\n');\\n    res.end();\\n  } else {\\n    res.json({\\n      choices: [{ \\n        message: { role: \\\"assistant\\\", content: response.text },\\n        finish_reason: \\\"stop\\\"\\n      }],\\n      usage\\n    });\\n  }\\n});\\n\\napp.listen(8080, () => {\\n  console.log('Service running on port 8080');\\n});\\n```\\n\",\"document\":[{\"href\":\"/provider-guide/api-examples#api-integration-examples\",\"html\":\"</header>\\n<p><strong>Remember</strong>: All examples below must include proper <code>usage</code> objects in responses to ensure payment. See the Critical Payment Warning in the Service Integration section.</p>\\n\",\"id\":\"docs/pages/provider-guide/api-examples.mdx#api-integration-examples\",\"isPage\":true,\"text\":\"\\nRemember: All examples below must include proper usage objects in responses to ensure payment. See the Critical Payment Warning in the Service Integration section.\\n\",\"title\":\"API Integration Examples\",\"titles\":[]},{\"href\":\"/provider-guide/api-examples#openai-compatible-service\",\"html\":\"\\n<p>If your service is OpenAI-compatible, minimal changes are needed:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">from</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flask </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Flask, request, jsonify, Response</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> openai</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> json</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">app </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Flask(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">__name__</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">@app.route</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/chat/completions&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">methods</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;POST&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> chat_completions</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">():</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> request.json</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    # Forward to your underlying model</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    response </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> openai.ChatCompletion.create(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">        model</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;model&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">        messages</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;messages&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">        stream</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;stream&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">False</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">        max_tokens</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;max_tokens&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">        temperature</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;temperature&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0.7</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    )</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> data.get(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;stream&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        def</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> generate</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">():</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> chunk </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">in</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> response:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">                yield</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> f</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;data: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">{</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">json.dumps(chunk)</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">}\\\\n\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            yield</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;data: [DONE]</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">\\\\n\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> Response(generate(), </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">mimetype</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;text/event-stream&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> jsonify(response)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">if</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> __name__</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> ==</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &#x27;__main__&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    app.run(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">host</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;0.0.0.0&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">port</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">8080</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre>\\n\",\"id\":\"docs/pages/provider-guide/api-examples.mdx#openai-compatible-service\",\"isPage\":false,\"text\":\"\\nIf your service is OpenAI-compatible, minimal changes are needed:\\nfrom flask import Flask, request, jsonify, Response\\nimport openai\\nimport json\\n \\napp = Flask(__name__)\\n \\n@app.route(&#x27;/chat/completions&#x27;, methods=[&#x27;POST&#x27;])\\ndef chat_completions():\\n    data = request.json\\n    \\n    # Forward to your underlying model\\n    response = openai.ChatCompletion.create(\\n        model=data.get(&#x27;model&#x27;),\\n        messages=data.get(&#x27;messages&#x27;),\\n        stream=data.get(&#x27;stream&#x27;, False),\\n        max_tokens=data.get(&#x27;max_tokens&#x27;),\\n        temperature=data.get(&#x27;temperature&#x27;, 0.7)\\n    )\\n    \\n    if data.get(&#x27;stream&#x27;):\\n        def generate():\\n            for chunk in response:\\n                yield f&quot;data: {json.dumps(chunk)}\\\\n\\\\n&quot;\\n            yield &quot;data: [DONE]\\\\n\\\\n&quot;\\n        \\n        return Response(generate(), mimetype=&#x27;text/event-stream&#x27;)\\n    \\n    return jsonify(response)\\n \\nif __name__ == &#x27;__main__&#x27;:\\n    app.run(host=&#x27;0.0.0.0&#x27;, port=8080)\\n\",\"title\":\"OpenAI-Compatible Service\",\"titles\":[\"API Integration Examples\"]},{\"href\":\"/provider-guide/api-examples#custom-service-example\",\"html\":\"\\n<p>For custom implementations, ensure you return proper usage information:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> express</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> require</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;express&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> app</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> express</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">();</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">app.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">use</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(express.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">json</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">());</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">app.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">post</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;/chat/completions&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">async</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">req</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">res</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  const</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> { </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">model</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">messages</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">stream</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">max_tokens</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> req.body;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  // Your model processing logic here</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> response</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> await</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> processRequest</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(messages, model);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  // Calculate token usage - CRITICAL for payment!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> usage</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> =</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    prompt_tokens: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">calculatePromptTokens</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(messages),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    completion_tokens: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">calculateCompletionTokens</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(response),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    total_tokens: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  };</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  usage.total_tokens </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> usage.prompt_tokens </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> usage.completion_tokens;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">  if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (stream) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">setHeader</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Content-Type&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;text/event-stream&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Stream response chunks</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">const</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> chunk</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> of</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> response.chunks) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">write</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">`data: ${</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">JSON</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">stringify</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#ADBAC7\\\">        choices: [{ delta: { content: </span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">chunk</span><span style=\\\"color:#032F62;--shiki-dark:#ADBAC7\\\"> } }]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">      })</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">}</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">\\\\n\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Send final chunk with usage - REQUIRED for payment!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">write</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">`data: ${</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">JSON</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">stringify</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#ADBAC7\\\">      choices: [{ finish_reason: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;stop&quot;</span><span style=\\\"color:#032F62;--shiki-dark:#ADBAC7\\\"> }]</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      usage</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    })</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">}</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">\\\\n\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">`</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">write</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;data: [DONE]</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">\\\\n\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">end</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">();</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">else</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    res.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">json</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">({</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      choices: [{ </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        message: { role: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;assistant&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, content: response.text },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        finish_reason: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;stop&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      }],</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">      usage</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    });</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">});</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">app.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">listen</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">8080</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, () </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=&gt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">  console.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">log</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&#x27;Service running on port 8080&#x27;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">);</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">});</span></span></code></pre>\",\"id\":\"docs/pages/provider-guide/api-examples.mdx#custom-service-example\",\"isPage\":false,\"text\":\"\\nFor custom implementations, ensure you return proper usage information:\\nconst express = require(&#x27;express&#x27;);\\nconst app = express();\\n \\napp.use(express.json());\\n \\napp.post(&#x27;/chat/completions&#x27;, async (req, res) =&gt; {\\n  const { model, messages, stream, max_tokens } = req.body;\\n  \\n  // Your model processing logic here\\n  const response = await processRequest(messages, model);\\n  \\n  // Calculate token usage - CRITICAL for payment!\\n  const usage = {\\n    prompt_tokens: calculatePromptTokens(messages),\\n    completion_tokens: calculateCompletionTokens(response),\\n    total_tokens: 0\\n  };\\n  usage.total_tokens = usage.prompt_tokens + usage.completion_tokens;\\n  \\n  if (stream) {\\n    res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/event-stream&#x27;);\\n    \\n    // Stream response chunks\\n    for (const chunk of response.chunks) {\\n      res.write(`data: ${JSON.stringify({\\n        choices: [{ delta: { content: chunk } }]\\n      })}\\\\n\\\\n`);\\n    }\\n    \\n    // Send final chunk with usage - REQUIRED for payment!\\n    res.write(`data: ${JSON.stringify({\\n      choices: [{ finish_reason: &quot;stop&quot; }],\\n      usage\\n    })}\\\\n\\\\n`);\\n    \\n    res.write(&#x27;data: [DONE]\\\\n\\\\n&#x27;);\\n    res.end();\\n  } else {\\n    res.json({\\n      choices: [{ \\n        message: { role: &quot;assistant&quot;, content: response.text },\\n        finish_reason: &quot;stop&quot;\\n      }],\\n      usage\\n    });\\n  }\\n});\\n \\napp.listen(8080, () =&gt; {\\n  console.log(&#x27;Service running on port 8080&#x27;);\\n});\",\"title\":\"Custom Service Example\",\"titles\":[\"API Integration Examples\"]}]}}"
